# Temperature Converter v2.1 - Secure Deployment with Kubernetes Secrets
# This deployment uses Kubernetes Secrets for sensitive data management

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app: postgres
    version: v2.1
spec:
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        version: v2.1
    spec:
      containers:
        - name: postgres
          image: postgres:15.0
          resources:
            limits:
              memory: "256Mi"
              cpu: "500m"
          ports:
            - containerPort: 5432
          env:
            # Using Kubernetes Secrets instead of plain text values
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: password
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: database
          # Security enhancements
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
          # Health checks for reliability
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - $(POSTGRES_USER)
                - -d
                - $(POSTGRES_DB)
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - $(POSTGRES_USER)
                - -d
                - $(POSTGRES_DB)
            initialDelaySeconds: 5
            periodSeconds: 5

---

apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
    version: v2.1
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      name: postgres

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: temperature-converter
  labels:
    app: temperature-converter
    version: v2.1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: temperature-converter
  template:
    metadata:
      labels:
        app: temperature-converter
        version: v2.1
    spec:
      containers:
        - name: temperature-converter
          image: nilsonsangy/temperature-converter:v2.1
          resources:
            limits:
              memory: "256Mi"
              cpu: "500m"
            requests:
              memory: "128Mi"
              cpu: "250m"
          ports:
            - containerPort: 8080
              name: http
          env:
            # Using Kubernetes Secrets for database connection
            - name: DB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: database
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: password
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: app-credentials
                  key: db-host
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  name: app-credentials
                  key: db-port
            # Non-sensitive configuration
            - name: NODE_ENV
              value: "production"
            - name: PORT
              value: "8080"
          # Security context for enhanced security
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          # Volume mounts for read-only root filesystem
          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp
            - name: cache-volume
              mountPath: /app/.npm
          # Health checks
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
      # Volumes for security context
      volumes:
        - name: tmp-volume
          emptyDir: {}
        - name: cache-volume
          emptyDir: {}

---

apiVersion: v1
kind: Service
metadata:
  name: temperature-converter
  labels:
    app: temperature-converter
    version: v2.1
spec:
  selector:
    app: temperature-converter
  type: LoadBalancer
  ports:
    - port: 8080
      targetPort: 8080
      name: http